from aiogram.filters.callback_data import CallbackData
from aiogram.types import InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

from database.crud import MarathonsQuery


class MenuCallBack(CallbackData, prefix="main"):
    level: int
    banner_name: str | None = None
    marathon: str | None = None
    page: int = 1
    role: str = "user"
    after_add: bool = False


class AdminCallBack(CallbackData, prefix="admin"):
    banner: str | None = None
    marathon: str | None = None
    marathon_id: int | None = None
    capacity: str | None = None
    attribute: str | None = None
    change: bool = False
    after_add: bool = False


def main_page_buttons(level: int, role: str,
                      sizes: tuple[int] = (2,)):
    keyboard = InlineKeyboardBuilder()

    buttons = {
        "–ú–ê–†–ê–§–û–ù–´ üèÉ‚Äç‚ôÄÔ∏è": "marathons",
        "–û–ü–õ–ê–¢–êüíµ": "payment",
        "–û –ù–ê–° ‚ÑπÔ∏è": "about",
        "FAQ üìÉ": "faq"
    }
    for button, banner in buttons.items():
        keyboard.add(InlineKeyboardButton(text=button,
                                          callback_data=MenuCallBack(level=level + 1,
                                                                     banner_name=banner,
                                                                     role=role).pack()))
    if role == "admin":
        keyboard.add(InlineKeyboardButton(text="–ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨‚öôÔ∏è",
                                          callback_data=AdminCallBack(banner="admin_panel").pack()))

    return keyboard.adjust(*sizes).as_markup()


def admin_panel_buttons(sizes: tuple[int] = (2,)):
    keyboard = InlineKeyboardBuilder()

    keyboard.add(InlineKeyboardButton(text="–î–û–ë–ê–í–ò–¢–¨ –ú–ê–†–ê–§–û–ù",
                                      callback_data=AdminCallBack(banner="add_marathon").pack()))
    keyboard.add(InlineKeyboardButton(text="–ò–ó–ú–ï–ù–ò–¢–¨ –ú–ê–†–ê–§–û–ù",
                                      callback_data=AdminCallBack(banner="change_marathon").pack()))
    keyboard.add(InlineKeyboardButton(text="‚¨ÖÔ∏è–ù–ê–ó–ê–î",
                                      callback_data=MenuCallBack(level=0, banner_name="main", role="admin").pack()))
    keyboard.add(InlineKeyboardButton(text="–ù–ê –ì–õ–ê–í–ù–£–Æüè†",
                                      callback_data=MenuCallBack(level=0, banner_name="main", role="admin").pack()))
    return keyboard.adjust(*sizes).as_markup()


def info_pages_buttons(level: int, role: str, sizes: tuple[int] = (2,)):
    # Info_pages: payment_page, about_page, faq_page
    keyboard = InlineKeyboardBuilder()

    buttons = {
        "‚¨ÖÔ∏è–ù–ê–ó–ê–î": "main",
        "–ú–ê–†–ê–§–û–ù–´üèÉ‚Äç‚ôÄÔ∏è": "marathons",
        "–ù–ê –ì–õ–ê–í–ù–£–Æüè†": "main",
    }
    for button, banner in buttons.items():

        if banner == "marathons":
            keyboard.add(InlineKeyboardButton(text=button,
                                              callback_data=MenuCallBack(level=level, banner_name=banner,
                                                                         role=role).pack()))
            continue
        keyboard.add(InlineKeyboardButton(text=button,
                                          callback_data=MenuCallBack(level=level - 1, banner_name=banner,
                                                                     role=role).pack()))

    return keyboard.adjust(*sizes).as_markup()


async def marathons_buttons(level: int,
                            role: str,
                            sizes: tuple[int] = (2,),
                            change_button: bool = False):
    keyboard = InlineKeyboardBuilder()
    marathons = await MarathonsQuery.get_all_instances(relationship="description")
    buttons = {marathon.description.header: marathon.name for marathon in marathons}

    for button, banner in buttons.items():
        if not change_button:
            keyboard.add(InlineKeyboardButton(text=button,
                                              callback_data=MenuCallBack(level=level + 1, banner_name=banner,
                                                                         role=role).pack()))
        else:
            keyboard.add(InlineKeyboardButton(text=button,
                                              callback_data=AdminCallBack(marathon=banner,
                                                                          change=True).pack()))
    if not change_button:
        keyboard.add(InlineKeyboardButton(text="‚¨ÖÔ∏è–ù–ê–ó–ê–î",
                                          callback_data=MenuCallBack(level=0, banner_name="main", role=role).pack()))
    else:
        keyboard.add(InlineKeyboardButton(text="‚¨ÖÔ∏è–ù–ê–ó–ê–î",
                                          callback_data=AdminCallBack(banner="admin_panel",
                                                                      after_add=True).pack()))

    return keyboard.adjust(*sizes).as_markup()


def marathon_button(level: int, page: int,
                    pagination_buttons: dict,
                    sizes: tuple[int] = (2, 1)):
    keyboard = InlineKeyboardBuilder()

    keyboard.add(InlineKeyboardButton(text="‚¨ÖÔ∏è–ù–ê–ó–ê–î",
                                      callback_data=MenuCallBack(level=level - 1, banner_name="marathons").pack()))
    keyboard.add(InlineKeyboardButton(text="–ö–£–ü–ò–¢–¨üí∂",
                                      callback_data=MenuCallBack(level=level + 3, banner_name="buy").pack()))
    keyboard.add(InlineKeyboardButton(text="–ù–ê –ì–õ–ê–í–ù–£–Æüè†",
                                      callback_data=MenuCallBack(level=0, banner_name="main").pack()))
    keyboard.adjust(*sizes)
    row = []
    for text, banner in pagination_buttons.items():
        if banner == "next":
            row.append(InlineKeyboardButton(text=text,
                                            callback_data=MenuCallBack(
                                                level=level,
                                                banner_name=banner,
                                                page=page + 1).pack()))

        elif banner == "previous":
            row.append(InlineKeyboardButton(text=text,
                                            callback_data=MenuCallBack(
                                                level=level,
                                                banner_name=banner,
                                                page=page - 1).pack()))

    return keyboard.row(*row).as_markup()


def change_marathon_buttons(marathon_id: int,
                            marathon: str,
                            sizes: tuple[int] = (1,)):
    keyboard = InlineKeyboardBuilder()
    buttons = {
        "–ù–ê–ó–í–ê–ù–ò–ï": "name",
        "–ó–ê–ì–û–õ–û–í–û–ö": "header",
        "–û–ü–ò–°–ê–ù–ò–ï": "description",
        "–¶–ï–ù–ê": "price",
        "–°–ö–ò–î–ö–ê": "discount",
        "–ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ï": "image",

    }

    for capacity, attribute in buttons.items():
        keyboard.add(InlineKeyboardButton(text=capacity,
                                          callback_data=AdminCallBack(marathon_id=marathon_id,
                                                                      marathon=marathon,
                                                                      capacity=capacity,
                                                                      attribute=attribute).pack()))
    #
    keyboard.add(InlineKeyboardButton(text="‚¨ÖÔ∏è–ù–ê–ó–ê–î",
                                      callback_data=AdminCallBack(banner="change_marathon").pack()))
    return keyboard.adjust(*sizes).as_markup()


def finish_add_marathon_buttons(sizes: tuple[int] = (1,)):
    keyboard = InlineKeyboardBuilder()
    keyboard.add(InlineKeyboardButton(text="–ù–ê –ì–õ–ê–í–ù–£–Æüè†",
                                      callback_data=MenuCallBack(level=0,
                                                                 banner_name="main",
                                                                 role="admin",
                                                                 after_add=True).pack()))
    keyboard.add(InlineKeyboardButton(text="–ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨‚öôÔ∏è",
                                      callback_data=AdminCallBack(banner="admin_panel", after_add=True).pack()))
    return keyboard.adjust(*sizes).as_markup()


def get_callback_buttons(buttons: dict[str, str], sizes: tuple[int] = (2,)):
    keyboard = InlineKeyboardBuilder()

    for text, data in buttons.items():
        keyboard.add(InlineKeyboardButton(text=text, callback_data=data))

    return keyboard.adjust(*sizes).as_markup()
